#!/usr/bin/env bash

set -euo pipefail

# ----- logging & colors -------------------------------------------------- {{{

red=$'\x1b[0;31m'
green=$'\x1b[0;32m'
yellow=$'\x1b[0;33m'
cyan=$'\x1b[0;36m'
cnone=$'\x1b[0m'

if [ -t 1 ]; then
  USE_COLOR=1
else
  USE_COLOR=0
fi

# Detects whether we can add colors or not
in_color() {
  local color="$1"
  shift

  if [ "$USE_COLOR" = "1" ]; then
    echo "$color$*$cnone"
  else
    echo "$*"
  fi
}

success() { echo "$(in_color "$green" "[ OK ]") $*"; }
error() {   echo "$(in_color "$red"   "[ERR!]") $*"; }
info() {    echo "$(in_color "$cyan"  "[INFO]") $*"; }
# Color entire warning to get users' attention (because we won't stop).
warn() { in_color "$yellow" "[WARN] $*"; }

# }}}

# ----- helper functions ------------------------------------------------------

ensure_clean() {
  local force_clean="$1"

  if ! git diff --quiet; then
    if [ -n "$force_clean" ]; then
      warn "Overriding git dirty check!"
      return
    else
      error "git diff showed uncommited changes. Aborting."
      error "Pass --force-clean to ignore this check."
      exit 1
    fi
  fi
}

ensure_gsed() {
  if ! command -v gsed &> /dev/null; then
    error "Missing required dependency: gsed"
    exit 1
  fi
}

ensure_multi_grep() {
  if ! command -v multi-grep &> /dev/null; then
    error "Missing required dependency: multi-grep"
    exit 1
  fi
}

ensure_multi_sed() {
  if ! command -v multi-sed &> /dev/null; then
    error "Missing required dependency: multi-sed"
    exit 1
  fi
}

populate_override_tmp() {
  local folder="$1"
  local override_tmp="$2"

  info "Populating override tmpfile: $override_tmp"

  echo 'strict:' > "$override_tmp"
  git ls-files "$folder/**.rb" | sed -e $'s/\\(.*\\)/  - \'\\1\'/' >> "$override_tmp"
}

# get merge base of master, which is where we'll make the PR against
git_review_base="$(git merge-base HEAD master)"

# list files which have changed since review base
git_files() {
  git diff --name-only "$git_review_base"
}

print_help() {
  cat <<EOF

suggest-runtime-profiled: Replayable script to suggest ::T::Utils::RuntimeProfiled

Usage:
  suggest-runtime-profiled [options] <folder>

Arguments:
  <folder>         Limit suggested types to only this folder.

Options:
  --force-clean    Ignore the check that the git repo isn't dirty.

EOF
}

# ----- option parsing --------------------------------------------------------

FORCE_CLEAN=
FOLDER=
while [[ $# -gt 0 ]]; do
  case $1 in
    --force-clean)
      FORCE_CLEAN=1
      shift
      ;;
    *)
      if [ -z "$FOLDER" ]; then
        FOLDER="$1"
      else
        error "Unrecognized positional arg: $1"
        exit 1
      fi
      shift
      ;;
  esac
done

if [ -z "$FOLDER" ]; then
  error "Missing required argument: <folder>"
  usage
  exit 1
fi

# ----- main ------------------------------------------------------------------

main() {
  ensure_clean "$FORCE_CLEAN"
  ensure_gsed
  ensure_multi_grep
  ensure_multi_sed

  info "Suggesting sigs in folder: $FOLDER"

  local override_flag
  if [ "$FOLDER" = "." ]; then
    override_flag="--typed=strict"
  else
    local override_tmp
    override_tmp="$(mktemp)"

    populate_override_tmp "$FOLDER" "$override_tmp"

    override_flag="--typed-override=$override_tmp"
  fi

  warn "If you see weird failures, double check that:"
  warn "- you've updated the RUBY_TYPER file list."
  warn "- you built sorbet with -c opt."

  # ----- suggest runtime profiled -----

  info "Suggesting T::Utils::RuntimeProfiled..."
  set -x
  sorbet/scripts/typecheck_devel "$override_flag" --suggest-runtime-profiled --autocorrect || true
  set +x

  git commit -a -m "Suggesting T::Utils::RuntimeProfiled..."

  # ----- fixups -----

  # For some reason we're still suggesting 'extend T::Helpers'
  info "Removing T::Helpers..."
  git_files | xargs gsed -i -e '/extend T::Helpers/d'
  if ! git commit -a -m "Removing T::Helpers..."; then
    warn "└─ step didn't change any files."
  fi

  info "Reverting class << self..."
  git grep -l 'class << self' | xargs git checkout "$git_review_base" --
  if ! git commit -a -m "Reverting class << self..."; then
    warn "└─ step didn't change any files."
  fi

  info "Running rubocop..."
  # shellcheck disable=SC2046
  if ! rubocop --auto-correct $(git diff --name-only "$git_review_base"); then
    info "Could not autocorrect all rubocop issues, rolling back offending files..."

    set +o pipefail
    # shellcheck disable=SC2046
    rubocop --format files "$(git_files)" | xargs git checkout "$git_review_base" --
    set -o pipefail
  fi
  if ! git commit -am "rubocop --auto-correct"; then
    warn "└─ step didn't change any files."
  fi

  # Fixup sigs on 'initialize' methods
  info "Fixing initialize ..."
  local included_tmp
  included_tmp="$(mktemp)"
  git grep -Hno 'def initialize' home | \
    cut -d: -f1-2 | \
    awk 'BEGIN { FS = ":" } { print $1 ":" ($2 - 1) }' | \
    multi-grep 'sig .generated' > "$included_tmp"

  multi-sed "$included_tmp" 's/returns.::T::Utils::RuntimeProfiled./void/'
  if ! git commit -am "multi-sed initialize"; then
    warn "└─ step didn't change any files."
  fi

  # Fixup sigs on 'self.included' methods
  info "Fixing self.included ..."
  local included_tmp
  included_tmp="$(mktemp)"
  git grep -Hno 'def self.included' home | \
    cut -d: -f1-2 | \
    awk 'BEGIN { FS = ":" } { print $1 ":" ($2 - 1) }' | \
    multi-grep 'sig .generated' > "$included_tmp"

  multi-sed "$included_tmp" 's/^\( *\).*/\1sig {generated.params(app: Class).void}/'
  if ! git commit -am "multi-sed self.included"; then
    warn "└─ step didn't change any files."
  fi

  local bad_sigs
  bad_sigs="$(mktemp)"
  info "Fix type sfrom starting every service."
  info "bad_sigs tmpfile: $bad_sigs"
  pay exec bundle exec ruby -e 'require "./lib/autoloader/preloader"; Opus::Autoloader::Preloader.run(["/pay/src/pay-server/admin/srv.rb", "/pay/src/pay-server/amp/srv.rb", "/pay/src/pay-server/api/srv.rb", "/pay/src/pay-server/bicci/srv.rb", "/pay/src/pay-server/cache/srv.rb", "/pay/src/pay-server/cibot/srv.rb", "/pay/src/pay-server/cibot_worker/srv.rb", "/pay/src/pay-server/devbox/srv.rb", "/pay/src/pay-server/es_reindex/srv.rb", "/pay/src/pay-server/excelsior/srv.rb", "/pay/src/pay-server/feportal/srv.rb", "/pay/src/pay-server/freighter/srv.rb", "/pay/src/pay-server/guildhall/srv.rb", "/pay/src/pay-server/heighliner/srv.rb", "/pay/src/pay-server/hint-evaluator/srv.rb", "/pay/src/pay-server/home/srv.rb", "/pay/src/pay-server/hydra/srv.rb", "/pay/src/pay-server/manage/srv.rb", "/pay/src/pay-server/marlin/srv.rb", "/pay/src/pay-server/panda_demo/srv.rb", "/pay/src/pay-server/saml_verifier/srv.rb", "/pay/src/pay-server/search_api/srv.rb", "/pay/src/pay-server/serenova_hooks/srv.rb", "/pay/src/pay-server/site/srv.rb", "/pay/src/pay-server/sources_adapter/srv.rb", "/pay/src/pay-server/status_site/srv.rb", "/pay/src/pay-server/support_export/srv.rb", "/pay/src/pay-server/support_site/srv.rb", "/pay/src/pay-server/template/srv.rb", "/pay/src/pay-server/upload/srv.rb", "/pay/src/pay-server/zendesk_hooks/srv.rb", "/pay/src/pay-server/devbox/dev_services/per_user_host_srv.rb"])' > "$bad_sigs" 2>&1
  scripts/bin/remote-script sorbet/scripts/fix_types_from_splunk.rb < "$bad_sigs"
  if ! git commit -am "Fix types from starting every service"; then
    warn "└─ step didn't change any files."
  fi

  info "cherry-pick: Manual patches to get types to check"
  git cherry-pick 269fdc4


  success "Done!"
  success "Check your git diff output for files changed."
}

main

# vim:fdm=marker
