#!/usr/bin/env bash

set -euo pipefail

# ----- logging & colors -------------------------------------------------- {{{

red=$'\x1b[0;31m'
green=$'\x1b[0;32m'
yellow=$'\x1b[0;33m'
cyan=$'\x1b[0;36m'
cnone=$'\x1b[0m'

USE_COLOR=
if [ -t 1 ]; then
  USE_COLOR=1
fi

# Detects whether we can add colors or not
in_color() {
  local color="$1"
  shift

  if [ -z "$USE_COLOR" ]; then
    echo "$*"
  else
    echo "$color$*$cnone"
  fi
}

success() { echo "$(in_color "$green" "[ OK ]") $*"; }
error() { echo "$(in_color "$red" "[ERR!]") $*"; }
info() { echo "$(in_color "$cyan" "[ .. ]") $*"; }
fatal() { error "$@"; exit 1; }
# Color entire message to get users' attention (because we won't stop).
attn() { in_color "$yellow" "[ .. ] $*"; }

# }}}

# ----- helper functions ------------------------------------------------------

usage() {
  cat <<EOF

git-rebase-stack: TODO Name and description

Usage:
  git-rebase-stack [options] TODO incantations

Arguments:
  TODO Required (positional) arguments

Options:
  TODO optional flags

EOF
}

expect_two_args() {
  if [ "$2" = "" ]; then
    error "Missing argument to $1"
    usage
    exit 1
  fi
}

expect_empty() {
  if [ "$1" != "" ]; then
    error "$2"
    usage
    exit 1
  fi
}

# ----- option parsing --------------------------------------------------------

orig_onto=
orig_head=
orig_from=
do_push=
# do_land=

while [[ $# -gt 0 ]]; do
  case $1 in
    --onto)
      expect_two_args "$1" "${2:-}"
      # expect_empty "$do_land" "Can only land onto master"
      orig_onto="$2"
      shift 2
      ;;
    -h|--head)
      expect_two_args "$1" "${2:-}"
      orig_head="$2"
      shift 2
      ;;
    -f|--from)
      expect_two_args "$1" "${2:-}"
      expect_empty "$orig_from" "--land <branch> already implies --from <branch>"
      orig_from="$2"
      shift 2
      ;;
    # --land)
    #   expect_two_args "$1" "${2:-}"
    #   expect_empty "$orig_from" "--land <branch> already implies --from <branch>"
    #   expect_empty "$do_push" "--land <branch> already implies --push"
    #   expect_empty "$orig_onto" "Can only land onto master"
    #   orig_from="$2"
    #   do_push="1"
    #   do_land="1"
    #   shift 2
    #   ;;
    -p|--push)
      do_push="1"
      shift
      ;;
    *)
      error "Unrecognized argument: $1"
      usage
      exit 1
      ;;
  esac
done

if [ "$orig_onto" = "" ]; then
  orig_onto="origin/master"
fi
if [ "$orig_head" = "" ]; then
  orig_head=$(git rev-parse HEAD)
fi
if [ "$orig_from" = "" ]; then
  orig_from="$(git merge-base "$orig_head" "$orig_onto")"
fi

if [ "$orig_from" = "$orig_head" ]; then
  error "Nothing to rebase."
  exit 1
fi

# Check if command output is non-empty
if [ "$(git rev-list --merges "$orig_from..$orig_head" | head -c1 | wc -c)" != "0" ]; then
  error "There are merge commits between here and the merge base."
  error "Merge commits are not supported."
  # TODO(jez) Show a git graph to help them diagnose.
  exit 1
fi

# ----- main ------------------------------------------------------------------

# List commits from orig_from to orig_head, not including orig_from.
commits=()
while IFS= read -r line; do
  commits+=( "$line" )
done < <(git rev-list --reverse "$orig_from..$orig_head")

# List branches that point directly to one of these commits, in order
branches=()
for commit in "${commits[@]}"; do
  while IFS= read -r line; do
    branches+=( "$line" )
  done < <(git for-each-ref --points-at "$commit" --format="%(refname:short)" "refs/heads/*")
done

onto="$orig_onto"
from="$orig_from"
for branch in "${branches[@]}"; do
  branch_sha=$(git rev-parse --short "$branch")

  rebase_cmd=("git" "rebase" "--quiet" "--onto" "$onto" "$from" "$branch")
  info "${rebase_cmd[*]}"
  "${rebase_cmd[@]}"

  onto="$branch"
  from="$branch_sha"
done

success "All branches rebased."

if [ "$do_push" != "" ]; then
  for branch in "${branches[@]}"; do
    push_cmd=("git" "push" "--force-with-lease" "--quiet" "origin" "$branch")
    info "${push_cmd[*]}"
    "${push_cmd[@]}"
  done

  success "All rebased branches pushed."

  # TODO(jez) This is all wrong; they shouldn't all be based on master but instead the previous one.
  # if [ "$do_land" != "" ]; then
  #   for branch in "${branches[@]}"; do
  #     # TODO(jez) This doesn't check for `hub` / `ghi` being available
  #     info "Getting PR number for branch $branch"

  #     if [ "$(hub pr list -h "$branch" | head -c1 | wc -c)" = "0" ]; then
  #       warn "No PR open for $branch"
  #       continue
  #     fi

  #     pr_url="$(hub pr show -u -h "$branch")"
  #     pr_number="${pr_url##*/}"

  #     ghi_edit_cmd=("ghi" "edit" "$pr_number" "-H" "$branch" "--base" "master")
  #     info "${ghi_edit_cmd[*]}"
  #     "${ghi_edit_cmd[@]}"
  #   done

  #   success "Updated all PR branches"
  # fi
fi

# TODO(jez) `git-land` == `git-rebase-stack --from`
# Might also want to delete the landed branch locally and remotely
#
# ^ Deleting a branch will close stacked PRs, so probably want something that
#   edits the landed branch's PR base
#   url=$(git pr show -u); pr_number=${url##*/}; echo "$pr_number"; ghi edit "$pr_number" --base master
#   curl --netrc -XPATCH "https://api.github.com/repos/sorbet/sorbet/pulls/$pr_number" -H "Content-Type: application/json" -d '{"base": "master"}'

# vim:fdm=marker
