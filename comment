#!/usr/bin/env bash

set -euo pipefail

# ----- logging & colors -------------------------------------------------- {{{

red=$'\x1b[0;31m'
green=$'\x1b[0;32m'
yellow=$'\x1b[0;33m'
cyan=$'\x1b[0;36m'
cnone=$'\x1b[0m'

USE_COLOR=
if [ -t 1 ]; then
  USE_COLOR=1
fi

# Detects whether we can add colors or not
in_color() {
  local color="$1"
  shift

  if [ -z "$USE_COLOR" ]; then
    echo "$*"
  else
    echo "$color$*$cnone"
  fi
}

success() { echo "$(in_color "$green" "[ OK ]") $*" >&2; }
error()   { echo "$(in_color "$red"   "[ERR!]") $*" >&2; }
info()    { echo "$(in_color "$cyan"  "[ .. ]") $*" >&2; }
fatal()   { error "$@"; exit 1; }
# Color entire message to get users' attention (because we won't stop).
attn()    { in_color "$yellow" "[ .. ] $*" >&2; }

# }}}

# ----- helper functions ------------------------------------------------------

usage() {
  cat <<EOF

git-pr-comment: Comment on a GitHub pull request using hub

Usage:
  git-pr-comment [options] <message>

Options:

  -r, --repo          The org/repo identifier where the pull request lives.
                      [default: inferred from current repo using hub]
  -p, --pull-request  The pull request number to comment on. [default: inferred
                      from current branch using hub]
  -h, --help          Show this help message.

This script requires hub. See http://go/using-hub

EOF
}

# ----- option parsing --------------------------------------------------------

repo=
pr_number=
message=
while [[ $# -gt 0 ]]; do
  case $1 in
    -p|--pull-request)
      pr_number="$2"
      shift
      ;;
    -r|--repo)
      repo="$2"
      shift
      ;;
    -h|--help)
      usage
      exit 0
      ;;
    -*)
      error "Invalid option: '$1'"
      usage
      exit 1
      ;;
    *)
      if [ "$message" != "" ]; then
        error "Invalid positional argument: '$1'"
        usage
        exit 1
      else
        message="$1"
        shift
      fi
      ;;
  esac
done

# ----- env setup -------------------------------------------------------------

if ! command -v hub > /dev/null; then
  fatal "This script requires hub. See http://go/using-hub"
fi

if ! command -v jq > /dev/null; then
  fatal "This script requires jq"
fi

info "Checking hub credentials"
# Make stdin /dev/null so that any interactive prompt for password fails immediately
if ! hub api < /dev/null &> /dev/null; then
  error "hub does not have an auth token."
  error "Run $(in_color "$cyan" "hub api") to create one."
  error "For help, see http://go/using-hub"
  exit 1
fi

# ----- option defaulting -----------------------------------------------------

if [ "$message" = "" ]; then
  error "No comment message provided"
  usage
  exit 1
fi

if [ "$repo" = "" ]; then
  repo="{owner}/{repo}"
fi

if [ "$pr_number" = "" ]; then
  pr_number="$(hub pr show --format="%I")"
fi

# ----- main ------------------------------------------------------------------

api_res="$(mktemp)"
# shellcheck disable=2064
trap "rm -f '$api_res'" EXIT

info "Commenting on $pr_number with hub..."
if ! hub api "repos/$repo/issues/$pr_number/comments" -F body="$message" > "$api_res"; then
  jq . "$api_res" >&2
  fatal "Using 'hub api' to comment on $repo#$pr_number failed."
fi

html_url=$(jq --raw-output '.html_url' "$api_res")
if [ "$html_url" = "" ]; then
  fatal "Using 'hub api' to submit $pr_number failed to add a comment."
fi

echo "$html_url"

success "Done."

# vim:fdm=marker
